(self.webpackChunkcpmanager=self.webpackChunkcpmanager||[]).push([[159],{3159:(s,e,n)=>{var t;(t=CPManager).sessions={selectedSessions:new Set,currentlyVisibleSessions:[],fetchManagerSessionStatus:async function(){try{const s=await fetch(`${t.config.baseUrl}/api/captiveportal/access/status/0`),e=await s.text();if(!s.ok)return console.warn(`Manager session status check failed: ${s.status} ${s.statusText}`),void(t.state.sessions.managerDetails=null);const n=JSON.parse(e);n&&n.sessionId&&"AUTHORIZED"===n.clientState?(t.state.sessions.managerDetails={sessionId:n.sessionId,zoneid:String(n.zoneid),ipAddress:n.ipAddress},console.log("Current device's session identified:",t.state.sessions.managerDetails.ipAddress,"ID:",t.state.sessions.managerDetails.sessionId.substring(0,8)+"..."),t.elements.tabPanes.sessions&&t.elements.tabPanes.sessions.classList.contains("active")&&t.sessions.applySessionFilters()):(t.state.sessions.managerDetails=null,console.log("Current device not connected via authorized captive portal session, or status endpoint returned unexpected data."))}catch(s){console.error("Exception during fetchManagerSessionStatus:",s.message),t.state.sessions.managerDetails=null}},loadSessions:async function(s=!1){if(t.zones||await n.e(415).then(n.t.bind(n,3415,23)),t.elements.sessionCardContainer){if(t.state.sessions.currentPage=1,this.selectedSessions.clear(),0===t.state.zones.allConfigured.length&&await t.zones.fetchAllZoneData(),this.populateSessionZoneFilter(),!s&&t.state.sessions.all.length>0&&Date.now()-t.state.sessions.lastFetched<60*t.config.inMemoryCacheTTLMinutes*1e3)return console.log("Using cached sessions. Applying filters."),void this.applySessionFilters();t.ui.showSkeletonLoaders(t.elements.sessionCardContainer,t.config.itemsPerPage,'<div class="skeleton-card"></div>',"session-pagination"),this.updateSelectAllUI();try{const s=await t.api.callApi("/session/search");s&&Array.isArray(s.rows)?(t.state.sessions.all=s.rows,t.state.sessions.lastFetched=Date.now(),this.applySessionFilters()):(console.error("Error loading sessions: API response `data.rows` is not an array or data is undefined.",s),t.ui.showNoDataMessage(t.elements.sessionCardContainer,"Error: Unexpected data format for sessions.","fas fa-exclamation-triangle","session-pagination"),t.state.sessions.all=[],this.currentlyVisibleSessions=[],this.updateSelectAllUI())}catch(s){console.error("Error loading sessions:",s),t.ui.showNoDataMessage(t.elements.sessionCardContainer,"Could not load sessions. Check API connection and OPNsense logs.","fas fa-exclamation-triangle","session-pagination"),t.state.sessions.all=[],this.currentlyVisibleSessions=[],this.updateSelectAllUI()}}},populateSessionZoneFilter:function(){if(!t.elements.sessionZoneFilterSelect)return;const s=localStorage.getItem(t.config.localStorageKeys.sessionZoneFilter)||"";t.elements.sessionZoneFilterSelect.innerHTML='<option value="">All Zones</option>',t.state.zones.allConfigured.length>0&&(t.state.zones.allConfigured.forEach((s=>{const e=document.createElement("option");e.value=s.zoneid,e.textContent=s.description||`Zone ${s.zoneid}`,t.elements.sessionZoneFilterSelect.appendChild(e)})),t.elements.sessionZoneFilterSelect.value=s)},applySessionFilters:function(){if(!t.elements.sessionCardContainer)return;t.state.sessions.currentPage=1,this.selectedSessions.clear();const s=t.elements.sessionSearchInput?t.elements.sessionSearchInput.value.toLowerCase():"",e=t.elements.sessionZoneFilterSelect?t.elements.sessionZoneFilterSelect.value:"";t.elements.sessionZoneFilterSelect&&localStorage.setItem(t.config.localStorageKeys.sessionZoneFilter,e);let n=t.state.sessions.all;e&&(n=n.filter((s=>String(s.zoneid)===e))),s&&(n=n.filter((e=>e.ipAddress&&e.ipAddress.toLowerCase().includes(s)||e.macAddress&&e.macAddress.toLowerCase().includes(s)||e.userName&&e.userName.toLowerCase().includes(s)||e.sessionId&&e.sessionId.toLowerCase().includes(s)))),this.currentlyVisibleSessions=n,this.renderSessions(n)},renderSessions:function(s){if(!t.elements.sessionCardContainer)return;const e=t.elements.sessionSelectAllContainer;if(t.ui.clearContainer(t.elements.sessionCardContainer,"session-pagination"),this.updateSelectAllUI(),!s||!Array.isArray(s)||0===s.length)return e&&e.classList.add("hidden"),void t.ui.showNoDataMessage(t.elements.sessionCardContainer,"No sessions match filters or no active sessions found.","fas fa-users-slash","session-pagination");e&&e.classList.remove("hidden");const n=t.state.sessions.currentPage,a=t.config.itemsPerPage,i=(n-1)*a,o=i+a;s.slice(i,o).forEach((s=>{const e=t.utils.getZoneDescription(s.zoneid),n=t.utils.getZoneColor(s.zoneid),a=t.utils.formatAuthVia(s.authenticated_via),i=t.utils.getAuthViaColor(a),o=t.utils.getMacAddressType(s.macAddress);let l="";if(o){const s="device"===o?"bg-secondary":"bg-purple-500",e=o.charAt(0).toUpperCase()+o.slice(1);l=`<span class="info-tag ${s}" title="MAC Type: ${e}">${e}</span>`}const c=t.state.sessions.managerDetails&&s.sessionId===t.state.sessions.managerDetails.sessionId&&String(s.zoneid)===t.state.sessions.managerDetails.zoneid,r=this.selectedSessions.has(s.sessionId),d=document.createElement("div");d.className="session-card cp-card "+(c?"ring-2 ring-offset-1 ring-primary":""),d.setAttribute("role","listitem"),d.setAttribute("aria-label",`Session for IP ${s.ipAddress||"Unknown IP"}`);let u="";c&&(u=`<span class="info-tag bg-primary flex items-center" title="This is your current device's session (IP: ${t.state.sessions.managerDetails.ipAddress||"N/A"})"><i class="fas fa-user-shield mr-1"></i>You</span>`);const p=`\n            <div class="flex-shrink-0">\n                <input type="checkbox" class="session-select-checkbox form-checkbox" data-session-id="${s.sessionId}" ${r?"checked":""}>\n            </div>`,h=`\n            <div class="flex items-center gap-1">\n                ${u}\n                ${l}\n                <span class="info-tag ${i}" title="Authenticated Via: ${a}">${a}</span>\n                <span class="info-tag ${n}" title="Zone: ${e}">${e}</span>\n            </div>`,g=`session-summary-${s.sessionId}`,m=`session-details-${s.sessionId}`;d.innerHTML=`\n            <div class="flex justify-between items-center mb-1">\n                ${p}\n                ${h}\n            </div>\n            <div id="${g}" class="session-summary cursor-pointer pb-1" role="button" tabindex="0" aria-expanded="false" aria-controls="${m}">\n                <div class="space-y-1">\n                    <div class="card-detail-row"><span class="card-label">IP Address</span> <span class="card-value">${s.ipAddress||t.config.placeholderValue}</span></div>\n                    <div class="card-detail-row"><span class="card-label">User</span> <span class="card-value">${s.userName||t.config.placeholderValue}</span></div>\n                    <div class="card-detail-row"><span class="card-label">MAC</span> <span class="card-value">${s.macAddress||t.config.placeholderValue}</span></div>\n                </div>\n            </div>\n            <div class="card-details-content max-h-0 overflow-hidden transition-all duration-300 ease-out text-sm space-y-1" id="${m}" aria-hidden="true">\n                <div class="card-detail-row"><span class="card-label">Zone ID</span> <span class="card-value-secondary">${s.zoneid}</span></div>\n                <div class="card-detail-row"><span class="card-label">Session ID</span> <span class="card-value-secondary">${s.sessionId||t.config.placeholderValue}</span></div>\n                <div class="card-detail-row"><span class="card-label">Start Time</span> <span class="card-value-secondary">${s.startTime?new Date(1e3*s.startTime).toLocaleString():t.config.placeholderValue}</span></div>\n                <div class="card-detail-row"><span class="card-label">Last Accessed</span> <span class="card-value-secondary">${s.last_accessed?new Date(1e3*s.last_accessed).toLocaleString():t.config.placeholderValue}</span></div>\n                <div class="card-detail-row"><span class="card-label">Packets Uploaded</span> <span class="card-value-secondary">${void 0!==s.packets_in?s.packets_in.toLocaleString():t.config.placeholderValue}</span></div>\n                <div class="card-detail-row"><span class="card-label">Packets Downloaded</span> <span class="card-value-secondary">${void 0!==s.packets_out?s.packets_out.toLocaleString():t.config.placeholderValue}</span></div>\n                <div class="card-detail-row"><span class="card-label">Data Uploaded</span> <span class="card-value-secondary">${void 0!==s.bytes_in?t.utils.formatBytes(s.bytes_in):t.config.placeholderValue}</span></div>\n                <div class="card-detail-row"><span class="card-label">Data Downloaded</span> <span class="card-value-secondary">${void 0!==s.bytes_out?t.utils.formatBytes(s.bytes_out):t.config.placeholderValue}</span></div>\n                <div class="card-detail-row"><span class="card-label">Acc. Timeout</span> <span class="card-value-secondary">${s.acc_session_timeout?t.utils.formatDuration(s.acc_session_timeout,"seconds"):t.config.placeholderValue}</span></div>\n            </div>`,t.elements.sessionCardContainer.appendChild(d)})),t.ui.renderPaginationControls(t.elements.sessionPaginationContainer,t.state.sessions.currentPage,s.length,t.config.itemsPerPage,(e=>{t.state.sessions.currentPage=e,this.renderSessions(s)}))},updateDisconnectSelectedButton:function(){const s=t.elements.disconnectSelectedSessionsBtn;if(!s)return;const e=this.selectedSessions.size;s.innerHTML='<i class="fas fa-times-circle mr-2"></i>Disconnect',s.disabled=0===e},updateSelectAllUI:function(){const{sessionSelectAllCheckbox:s,sessionSelectedCountText:e,sessionSelectAllContainer:n}=t.elements;if(!s||!e||!n)return;this.updateDisconnectSelectedButton();const a=this.selectedSessions.size;e.textContent=`(${a} session${1===a?"":"s"} selected)`;const i=this.currentlyVisibleSessions;if(0===i.length)return n.classList.add("hidden"),s.checked=!1,s.indeterminate=!1,void(s.disabled=!0);n.classList.remove("hidden"),s.disabled=!1;const o=i.every((s=>this.selectedSessions.has(s.sessionId)));s.checked=o,s.indeterminate=a>0&&!o},handleSelectAll:function(s){this.currentlyVisibleSessions.forEach((e=>{s?this.selectedSessions.add(e.sessionId):this.selectedSessions.delete(e.sessionId)})),this.renderSessions(this.currentlyVisibleSessions)},handleDisconnectSelectedSessions:async function(){const s=Array.from(this.selectedSessions);if(0===s.length)return void t.ui.showToast("No sessions selected.","info");const e=t.state.sessions.all.filter((e=>s.includes(e.sessionId)));if(0===e.length)return t.ui.showToast("Could not find details for selected sessions. Please refresh.","error"),this.selectedSessions.clear(),void this.updateSelectAllUI();const n=t.state.sessions.managerDetails?.sessionId&&this.selectedSessions.has(t.state.sessions.managerDetails.sessionId);let a="Disconnect Selected Sessions?",i=`Are you sure you want to disconnect the <strong>${e.length}</strong> selected session(s)?`;n&&(a="Warning: Disconnecting Own Session",i=`<div class="alert-box alert-box-danger"><i class="fas fa-biohazard mr-2 mt-1 text-danger"></i><span><strong>DANGER:</strong> Your own session is included in the selection. Disconnecting it may lock you out of this manager.</span></div><p class="mt-4">Disconnect <strong>${e.length}</strong> session(s) anyway?</p>`),t.ui.showConfirmationModal(a,i,(async()=>{t.ui.showToast(`Disconnecting ${e.length} session(s)...`,"info",5e3);let s=0,n=0;const a=e.map((e=>t.api.callApi(`/session/disconnect/${e.zoneid}`,"POST",{sessionId:e.sessionId}).then((t=>{t&&(t.terminateCause||"ok"===t.status||"ok_text"===t.status)?s++:(n++,console.warn(`Failed to disconnect session ${e.sessionId}:`,t))})).catch((s=>{n++,console.error(`Error disconnecting session ${e.sessionId}:`,s)}))));await Promise.all(a);let i="",o="info";s>0&&0===n?(i=`Successfully disconnected all ${s} selected sessions.`,o="success"):s>0&&n>0?(i=`Disconnected ${s} sessions. Failed for ${n}. Check console.`,o="warning"):0===s&&n>0&&(i=`Failed to disconnect any of the ${n} selected sessions. Check console.`,o="error"),t.ui.showToast(i,o,7e3),this.selectedSessions.clear(),await this.loadSessions(!0)}))},initializeSessionEventListeners:function(){t.elements.sessionSearchInput&&t.elements.sessionSearchInput.addEventListener("input",(()=>this.applySessionFilters())),t.elements.sessionZoneFilterSelect&&t.elements.sessionZoneFilterSelect.addEventListener("change",(()=>this.applySessionFilters())),t.elements.sessionCardContainer&&t.elements.sessionCardContainer.addEventListener("click",(s=>{const e=s.target.closest(".session-select-checkbox");if(e){const s=e.dataset.sessionId;return e.checked?(this.selectedSessions.add(s),t.state.sessions.managerDetails&&s===t.state.sessions.managerDetails.sessionId&&t.ui.showToast("Warning: You have selected your own session.","warning",4e3)):this.selectedSessions.delete(s),void this.updateSelectAllUI()}const n=s.target.closest(".session-card");n&&t.ui.toggleCardDetails(n)})),t.elements.disconnectSelectedSessionsBtn&&t.elements.disconnectSelectedSessionsBtn.addEventListener("click",(()=>this.handleDisconnectSelectedSessions())),t.elements.sessionSelectAllCheckbox&&t.elements.sessionSelectAllCheckbox.addEventListener("change",(s=>this.handleSelectAll(s.target.checked))),t.elements.findMySessionBtn&&t.elements.findMySessionBtn.addEventListener("click",(async()=>{t.state.sessions.managerDetails&&t.state.sessions.managerDetails.sessionId?(t.ui.showToast(`Found your session (IP: ${t.state.sessions.managerDetails.ipAddress}). Highlighting...`,"info"),t.elements.sessionZoneFilterSelect&&(t.elements.sessionZoneFilterSelect.value=""),t.elements.sessionSearchInput&&(t.elements.sessionSearchInput.value=t.state.sessions.managerDetails.sessionId),this.applySessionFilters(),t.tabs.setActiveTab("sessions"),setTimeout((()=>{const s=document.querySelector(".is-manager-session");s&&s.scrollIntoView({behavior:"smooth",block:"center"})}),300)):(t.ui.showToast("Your session details not found. Fetching...","warning"),await this.fetchManagerSessionStatus(),t.state.sessions.managerDetails?t.elements.findMySessionBtn.click():t.ui.showToast("Still couldn't find your session. Ensure you are logged into the portal.","warning"))}))}}}}]);
//# sourceMappingURL=159.f8e40fab8395a1a20c88.js.map