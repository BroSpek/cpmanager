{"version":3,"file":"js/sw.dffdd69bc7004d9fd48c.js","mappings":"MAGA,MAAMA,EAAa,mBACbC,EAAc,CAClB,aACA,yBACA,0BAIFC,KAAKC,iBAAiB,WAAYC,IAChCC,QAAQC,IAAI,8BAA8BN,QAC1CI,EAAMG,UACJC,OACGC,KAAKT,GACLU,MAAMC,IACLN,QAAQC,IAAI,0CAA0CN,KAC/CW,EAAMC,OAAOX,MAErBS,MAAK,KACJL,QAAQC,IACN,iCAAiCN,yBAE5BE,KAAKW,iBAEbC,OAAOC,IACNV,QAAQU,MACN,+BAA+Bf,WAC/Be,UAMVb,KAAKC,iBAAiB,YAAaC,IACjCC,QAAQC,IAAI,8BAA8BN,QAC1C,MAAMgB,EAAiB,CAAChB,GACxBI,EAAMG,UACJC,OACGS,OACAP,MAAMQ,GACEC,QAAQC,IACbF,EAAWG,KAAKC,IACd,IAA2C,IAAvCN,EAAeO,QAAQD,GAEzB,OADAjB,QAAQC,IAAI,uCAAuCgB,KAC5Cd,OAAOgB,OAAOF,SAK5BZ,MAAK,KACJL,QAAQC,IACN,8BAA8BN,8BAEzBE,KAAKuB,QAAQC,eAK5BxB,KAAKC,iBAAiB,SAAUC,IACD,QAAzBA,EAAMuB,QAAQC,QAIlBxB,EAAMyB,YACJrB,OACGC,KAAKT,GACLU,MAAMC,GACEA,EAAMmB,MAAM1B,EAAMuB,SAASjB,MAAMqB,GAClCA,GAGGC,MAAM5B,EAAMuB,SAASjB,MAAMuB,GACzBA,QAIZnB,OAAOC,IACNV,QAAQU,MACN,qDACAA,UAMVb,KAAKC,iBAAiB,WAAYC,IAChC,GAAIA,EAAM8B,MAA4B,sBAApB9B,EAAM8B,KAAKC,KAA8B,CACzD,MAAM,MAAEC,EAAK,KAAEC,EAAI,KAAEC,EAAI,GAAEC,GAAOnC,EAAM8B,KAAKM,QAC7CpC,EAAMG,UACJL,KAAKuC,aAAaC,iBAAiBN,EAAO,CACxCC,KAAMA,EACNC,KAAMA,GAAQ,yBACdK,MAAO,uBACPC,IAAK,mBAAmBL,IAAM,IAAIM,MAAOC,cAG/C,KAGF5C,KAAKC,iBAAiB,qBAAsBC,IAC1CA,EAAM2C,aAAaC,QAEnB,MAAMC,EAAY,IAAIC,IAAI,sBAAuBhD,KAAKuC,aAAaU,OAChEC,KAEHhD,EAAMG,UACJL,KAAKuB,QACF4B,SAAS,CAAElB,KAAM,SAAUmB,qBAAqB,IAChD5C,MAAM6C,IACL,IAAK,MAAMC,KAAUD,EACnB,GACEC,EAAOC,IAAIC,WAAWxD,KAAKuC,aAAaU,QACxC,UAAWK,EAGX,OADAA,EAAOG,SAASV,GACTO,EAAOI,QAGlB,GAAI1D,KAAKuB,QAAQoC,WACf,OAAO3D,KAAKuB,QAAQoC,WAAWZ,S","sources":["webpack://cpmanager/./src/sw.js"],"sourcesContent":["// sw.js - Service Worker for Caching App Shell with Automatic Updates and Notification Handling\r\n\r\n// Increment the version when you change urlsToCache or the SW logic itself.\r\nconst CACHE_NAME = \"cpm-cache-v0.1.1\";\r\nconst urlsToCache = [\r\n  \"index.html\",\r\n  \"icons/icon-192x192.png\",\r\n  \"icons/icon-512x512.png\",\r\n  // If you add new files to app shell, add them here AND update CACHE_NAME\r\n];\r\n\r\nself.addEventListener(\"install\", (event) => {\r\n  console.log(`Service Worker: Installing ${CACHE_NAME}...`);\r\n  event.waitUntil(\r\n    caches\r\n      .open(CACHE_NAME)\r\n      .then((cache) => {\r\n        console.log(`Service Worker: Caching app shell into ${CACHE_NAME}`);\r\n        return cache.addAll(urlsToCache);\r\n      })\r\n      .then(() => {\r\n        console.log(\r\n          `Service Worker: App shell for ${CACHE_NAME} cached successfully`,\r\n        );\r\n        return self.skipWaiting(); // Activate new SW immediately\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          `Service Worker: Caching for ${CACHE_NAME} failed`,\r\n          error,\r\n        );\r\n      }),\r\n  );\r\n});\r\n\r\nself.addEventListener(\"activate\", (event) => {\r\n  console.log(`Service Worker: Activating ${CACHE_NAME}...`);\r\n  const cacheWhitelist = [CACHE_NAME];\r\n  event.waitUntil(\r\n    caches\r\n      .keys()\r\n      .then((cacheNames) => {\r\n        return Promise.all(\r\n          cacheNames.map((cacheName) => {\r\n            if (cacheWhitelist.indexOf(cacheName) === -1) {\r\n              console.log(`Service Worker: Deleting old cache: ${cacheName}`);\r\n              return caches.delete(cacheName);\r\n            }\r\n          }),\r\n        );\r\n      })\r\n      .then(() => {\r\n        console.log(\r\n          `Service Worker: Activated (${CACHE_NAME}) and old caches cleaned.`,\r\n        );\r\n        return self.clients.claim(); // Take control of uncontrolled clients\r\n      }),\r\n  );\r\n});\r\n\r\nself.addEventListener(\"fetch\", (event) => {\r\n  if (event.request.method !== \"GET\") {\r\n    return;\r\n  }\r\n\r\n  event.respondWith(\r\n    caches\r\n      .open(CACHE_NAME)\r\n      .then((cache) => {\r\n        return cache.match(event.request).then((response) => {\r\n          if (response) {\r\n            return response;\r\n          }\r\n          return fetch(event.request).then((networkResponse) => {\r\n            return networkResponse;\r\n          });\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\r\n          \"Service Worker: Fetch failed or cache open failed.\",\r\n          error,\r\n        );\r\n      }),\r\n  );\r\n});\r\n\r\nself.addEventListener(\"message\", (event) => {\r\n  if (event.data && event.data.type === \"SHOW_NOTIFICATION\") {\r\n    const { title, body, icon, id } = event.data.payload;\r\n    event.waitUntil(\r\n      self.registration.showNotification(title, {\r\n        body: body,\r\n        icon: icon || \"icons/icon-192x192.png\",\r\n        badge: \"icons/badge-icon.png\",\r\n        tag: `new-user-signin-${id || new Date().getTime()}`,\r\n      }),\r\n    );\r\n  }\r\n});\r\n\r\nself.addEventListener(\"notificationclick\", (event) => {\r\n  event.notification.close();\r\n\r\n  const urlToOpen = new URL(\"index.html#sessions\", self.registration.scope)\r\n    .href;\r\n\r\n  event.waitUntil(\r\n    self.clients\r\n      .matchAll({ type: \"window\", includeUncontrolled: true })\r\n      .then((clientList) => {\r\n        for (const client of clientList) {\r\n          if (\r\n            client.url.startsWith(self.registration.scope) &&\r\n            \"focus\" in client\r\n          ) {\r\n            client.navigate(urlToOpen);\r\n            return client.focus();\r\n          }\r\n        }\r\n        if (self.clients.openWindow) {\r\n          return self.clients.openWindow(urlToOpen);\r\n        }\r\n      }),\r\n  );\r\n});\r\n"],"names":["CACHE_NAME","urlsToCache","self","addEventListener","event","console","log","waitUntil","caches","open","then","cache","addAll","skipWaiting","catch","error","cacheWhitelist","keys","cacheNames","Promise","all","map","cacheName","indexOf","delete","clients","claim","request","method","respondWith","match","response","fetch","networkResponse","data","type","title","body","icon","id","payload","registration","showNotification","badge","tag","Date","getTime","notification","close","urlToOpen","URL","scope","href","matchAll","includeUncontrolled","clientList","client","url","startsWith","navigate","focus","openWindow"],"sourceRoot":""}